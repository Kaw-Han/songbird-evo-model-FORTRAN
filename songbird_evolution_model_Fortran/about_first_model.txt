The code is an Individual based model (IBM), in object oriented style. 
The program simulates a population of birds that are released
into an array(habitat). Each point in the array has a nutritional value as well
as a value for risk of predation. 

The aim of this code is to simulate the level of fear/hunger that will
remain in the birds genetic code after 1000 generations. We do this to 
answer the question: 

"What is the ideal level of fear and boldness for a bird subjected to 
the stress of predator-induced fear and hunger?" 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


******** PARAMS MODULE ***********

The first_model program starts off with the params module.
This module shows the parameters for all types, often in integer- or float-form.
It contains elemental functions (within, rescale,) that are handy to have throughout
the entire code. 


******** ENVIRONMENT MODULE ******** 

here the following types are declared:

- location
    - spacial location in one cell, in the initial model 
      it's just a single cell assigned a integer number. 
- env_cell (extends location)
    - contains real values for food_availability and 
      risk_of_predation. This value is unique for every 
      cell and is assigned randomly. 
- whole_environ
    - The whole environment is a collection of cells.
      Note that the size of the environment is an allocatable
      (i.e. dynamic) array.

the module contains the following subroutines and functions:

- location_place_random
    - this subroutine places the basic spatial object (location class) 
      to a random place. 

- location_place_object_location
    - place a spatial object to a specific location (cell)
      within the environment. 

- location_random_walk
        subroutine for deciding to go left or right. optional 
        params decides what min or max positions are, but if not
        provided the walk is confined to default cell-values 
        decided in the params. 

- cell_init
    - initializes a single cell within the environment. 
      this = foraging area, x = x-coordinate

- env_init
    - initializes the whole enviornment. 
      optional params for max size, but if not given
      default from params are used. 

(end module environment)


******** GENOME MODULE ******** 
(******** organism module ******** ) 

within the module we use following params:
- params
- environment
- BASE_RANDOM

the following types are: 
- GENE (extends location)
    - gene_fear_hunger; if gene_fear_hunger is high = HUNGER_MAX,
      then fear in the bird is low. Meaning it will eat no matter what 
      until it's weight reaches a threshold where fear kicks inn again. 
      the opposite is also true. If too afraid, it won't eat, meaning also that
      the birds is sufficiently saturated according to it's weigh/mass and 
      genetic dispositions. 
    - the type contains the following procedures:
      - gene_init: initializing the bird with the genetic composition.
      - gene_mutate: a value for the amount of mutations expected. 
                    In bird species this corresponds roughly to 1,9 * 10^-3 per generation. 

- BIRD (extends GENE)
  - we have the following:
   real values:
    - weight 
      - the mass of the bird in grams
    - state_fear_hunger
      - the emotional state of the bird.
   logical values:
    - is_alive
      - is the bird alive? true or false
   integer:
    - bird_meets_predator_counter
      - counts the times in a row the bird meets the predator. 
      - if the bird does not encounter a predator, the counter resets. 


    
- PREDATOR 
  the real value called "risk":
    - If PREDATOR sees the bird according to the risk_of_the,
      the risk of attack is this.
  this type contains:
  - predator_init_new
    - initializes a new predator
  - predator_attack_bird
    - initializes attack. 

- POPULATION
    - 

the module contains the following subroutines and functions:

- population_init_new
- population_get_dead_count
- predator_init_new
- predator_attack_bird
- gene_init
- bird_init
- bird_is_starved
- bird_feeds
- bird_dead_from_starvation
- bird_do_fly
- bird_update_emotion
- bird_hunger_min_genetic_limit
- bird_hunger_max_genetic_limit
- birde_force_hunger_withing_genetic_limits
- emotion_step
- population_time_steps
- population_time_steps


